// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  TENANT
}

enum BookingStatus {
  MENUNGGU_PEMBAYARAN
  MENUNGGU_KONFIRMASI
  DIKONFIRMASI
  DIBATALKAN
}

enum AdjustmentType {
  PERCENTAGE
  NOMINAL
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  MAGIC_LINK_LOGIN
}

model User {
  id             Int      @id @default(autoincrement())
  name           String
  email          String      @unique
  passwordHash   String
  role           Role        @default(USER)
  isVerified     Boolean     @default(false)
  profilePicture String?
  createdAt      DateTime    @default(now())

  tenantProfile  TenantProfile?
  properties     Property[]     @relation("TenantProperties")
  bookings       Booking[]
  reviews        Review[]       @relation("UserReviews")
  reviewReplies  Review[]       @relation("TenantReplies")
  userTokens     UserToken[]
  peakRates      PeakSeasonRate[] @relation("TenantPeakRates")
}

model TenantProfile {
  id      Int @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  Int @unique
  bio     String?
  phone   String?
  address String?
}


model Property {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  location    Location
  category    PropertyCategory
  mainImage   String?
  createdAt   DateTime   @default(now())

  tenant      User       @relation("TenantProperties", fields: [tenantId], references: [id])
  tenantId    Int

  rooms       Room[]
  reviews     Review[]   @relation("PropertyReviews")
}

enum PropertyCategory {
  VILLA
  APARTMENT
  HOMESTAY
}

enum Location {
  BALI
  JAKARTA
  SURABAYA
  BANDUNG
  YOGYAKARTA
  MALANG
}

model Room {
  id            Int             @id @default(autoincrement())
  name          String
  description   String?
  basePrice     String
  capacity      Int
  picture       String?

  property      Property           @relation(fields: [propertyId], references: [id])
  propertyId    Int

  availabilities RoomAvailability[]
  bookings      Booking[]
}

model RoomAvailability {
  id            Int   @id @default(autoincrement())
  room          Room     @relation(fields: [roomId], references: [id])
  roomId        Int
  date          DateTime
  isAvailable   Boolean  @default(true)
  priceOverride String?
}

model PeakSeasonRate {
  id              Int   @id @default(autoincrement())
  tenant          User     @relation("TenantPeakRates", fields: [tenantId], references: [id])
  tenantId        Int
  date            DateTime
  adjustmentType  AdjustmentType
  adjustmentValue String
}

model Booking {
  id             Int    @id @default(autoincrement())
  user           User      @relation(fields: [userId], references: [id])
  userId         Int
  room           Room      @relation(fields: [roomId], references: [id])
  roomId         Int

  startDate      DateTime
  endDate        DateTime
  totalPrice     String
  status         BookingStatus @default(MENUNGGU_PEMBAYARAN)
  paymentProofUrl String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  review         Review?   @relation("BookingReview")
}

model Review {
  id         Int   @id @default(autoincrement())
  comment    String
  createdAt  DateTime @default(now())

  user       User     @relation("UserReviews", fields: [userId], references: [id])
  userId     Int

  booking    Booking? @relation("BookingReview", fields: [bookingId], references: [id])
  bookingId  Int? @unique

  property   Property  @relation("PropertyReviews", fields: [propertyId], references: [id])
  propertyId Int

  parent     Review?   @relation("ReplyToReview", fields: [parentId], references: [id])
  parentId   Int?

  replies    Review[]  @relation("ReplyToReview")
  tenant     User?     @relation("TenantReplies", fields: [tenantId], references: [id])
  tenantId   Int?
}

model UserToken {
  id        Int    @id @default(autoincrement())
  token     String    @unique
  type      TokenType
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime
  isUsed    Boolean   @default(false)
  createdAt DateTime  @default(now())
}
